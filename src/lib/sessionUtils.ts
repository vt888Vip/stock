import { ObjectId } from 'mongodb';
import { processWinTrade, processLoseTrade, calculateProfit } from '@/lib/balanceUtils';

/**
 * T·∫°o sessionId d·ª±a tr√™n th·ªùi gian hi·ªán t·∫°i
 * ƒê·ªãnh d·∫°ng: YYMMDDHHmm (V√≠ d·ª•: 2507111927 cho 19:27 ng√†y 11/07/2025)
 */
export function generateSessionId(date: Date = new Date()): string {
  const year = date.getUTCFullYear().toString();
  const month = (date.getUTCMonth() + 1).toString().padStart(2, '0');
  const day = date.getUTCDate().toString().padStart(2, '0');
  const hours = date.getUTCHours().toString().padStart(2, '0');
  const minutes = date.getUTCMinutes().toString().padStart(2, '0');
  return `${year}${month}${day}${hours}${minutes}`;
}

/**
 * L·∫•y th√¥ng tin t·ª´ sessionId
 */
export const parseSessionId = (sessionId: string) => {
  if (!sessionId || sessionId.length !== 10) return null;
  
  const year = parseInt(sessionId.slice(0, 2), 10) + 2000; // Gi·∫£ s·ª≠ th·∫ø k·ª∑ 21
  const month = parseInt(sessionId.slice(2, 4), 10) - 1; // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0
  const day = parseInt(sessionId.slice(4, 6), 10);
  const hour = parseInt(sessionId.slice(6, 8), 10);
  const minute = parseInt(sessionId.slice(8, 10), 10);
  
  // T·∫°o ƒë·ªëi t∆∞·ª£ng Date v·ªõi m√∫i gi·ªù Vi·ªát Nam
  const date = new Date(Date.UTC(year, month, day, hour - 7, minute)); // UTC+7
  
  return {
    date,
    year,
    month: month + 1,
    day,
    hour,
    minute,
    // Th√™m c√°c th√¥ng tin h·ªØu √≠ch kh√°c n·∫øu c·∫ßn
    formattedTime: `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`,
    formattedDate: `${day.toString().padStart(2, '0')}/${(month + 1).toString().padStart(2, '0')}/${year}`
  };
};

// Cache ƒë·ªÉ tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p
const processedSessionsCache = new Set<string>();

// H√†m x·ª≠ l√Ω phi√™n h·∫øt h·∫°n v√† c√¥ng b·ªë k·∫øt qu·∫£
export async function processExpiredSessions(db: any, apiName: string = 'Unknown') {
  const now = new Date();
  
  // T√¨m c√°c phi√™n ƒë√£ h·∫øt h·∫°n nh∆∞ng ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
  const expiredSessions = await db.collection('trading_sessions').find({
    status: { $in: ['ACTIVE', 'PREDICTED'] },
    endTime: { $lte: now }
  }).toArray();


  for (const session of expiredSessions) {
    try {
      // ‚úÖ TH√äM: Ki·ªÉm tra cache ƒë·ªÉ tr√°nh x·ª≠ l√Ω tr√πng l·∫∑p
      const cacheKey = `${session.sessionId}_${apiName}`;
      if (processedSessionsCache.has(cacheKey)) {
        continue;
      }
      
      
      // 1. Ki·ªÉm tra xem admin ƒë√£ ƒë·∫∑t k·∫øt qu·∫£ ch∆∞a
      let result = session.result;
      let createdBy = session.createdBy || 'system';
      
      if (!result) {
        // ‚úÖ S·ª¨A: N·∫øu kh√¥ng c√≥ k·∫øt qu·∫£, t·∫°o random k·∫øt qu·∫£
        console.log(`üé≤ [${apiName}] Phi√™n ${session.sessionId} kh√¥ng c√≥ k·∫øt qu·∫£, t·∫°o random k·∫øt qu·∫£`);
        
        // T·∫°o random k·∫øt qu·∫£ (50% UP, 50% DOWN)
        const random = Math.random();
        result = random < 0.5 ? 'UP' : 'DOWN';
        createdBy = 'system';
        
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ cho phi√™n
        await db.collection('trading_sessions').updateOne(
          { _id: session._id },
          { 
            $set: { 
              result: result,
              actualResult: result,
              createdBy: createdBy,
              updatedAt: now
            }
          }
        );
        
        console.log(`üé≤ [${apiName}] ƒê√£ t·∫°o random k·∫øt qu·∫£ cho phi√™n ${session.sessionId}: ${result}`);
      } else {
        console.log(`üëë [${apiName}] S·ª≠ d·ª•ng k·∫øt qu·∫£ c√≥ s·∫µn cho phi√™n ${session.sessionId}: ${result}`);
      }

      // 2. C·∫≠p nh·∫≠t tr·∫°ng th√°i phi√™n th√†nh COMPLETED
      await db.collection('trading_sessions').updateOne(
        { _id: session._id },
        { 
          $set: { 
            status: 'COMPLETED',
            result: result,
            actualResult: result, // L∆∞u k·∫øt qu·∫£ th·ª±c t·∫ø
            createdBy: createdBy,
            completedAt: now,
            updatedAt: now
          }
        }
      );


      // 3. L·∫•y t·∫•t c·∫£ l·ªánh c·ªßa phi√™n n√†y
      const trades = await db.collection('trades').find({ 
        sessionId: session.sessionId, 
        status: 'pending' 
      }).toArray();


      for (const trade of trades) {
        // 4. X√°c ƒë·ªãnh win/lose
        const isWin = trade.direction === result;
        const profit = isWin ? calculateProfit(trade.amount, 0.9) : 0; // Th·∫Øng ƒë∆∞·ª£c 90%
        const newStatus = 'completed';

        // 5. C·∫≠p nh·∫≠t l·ªánh
        await db.collection('trades').updateOne(
          { _id: trade._id },
          { 
            $set: { 
              status: newStatus, 
              result: isWin ? 'win' : 'lose', 
              profit: profit,
              updatedAt: now
            }
          }
        );

        // 6. ‚úÖ S·ª¨A: S·ª≠ d·ª•ng balanceUtils thay v√¨ x·ª≠ l√Ω tr·ª±c ti·∫øp
        try {
          if (isWin) {
            await processWinTrade(db, trade.userId.toString(), trade.amount, profit);
          } else {
            await processLoseTrade(db, trade.userId.toString(), trade.amount);
          }
        } catch (error) {
          console.error(`‚ùå [${apiName}] L·ªói x·ª≠ l√Ω balance cho trade ${trade._id}:`, error);
        }
      }

      // ‚úÖ TH√äM: ƒê√°nh d·∫•u phi√™n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
      processedSessionsCache.add(cacheKey);
      
    } catch (error) {
      console.error(`‚ùå [${apiName}] L·ªói khi x·ª≠ l√Ω phi√™n ${session.sessionId}:`, error);
    }
  }
  
  // ‚úÖ TH√äM: Cleanup cache sau 5 ph√∫t ƒë·ªÉ tr√°nh memory leak
  setTimeout(() => {
    processedSessionsCache.clear();
  }, 5 * 60 * 1000);
}
