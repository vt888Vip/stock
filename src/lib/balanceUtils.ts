import { ObjectId } from 'mongodb';

/**
 * Utility functions ƒë·ªÉ x·ª≠ l√Ω balance m·ªôt c√°ch an to√†n v√† ch√≠nh x√°c
 * S·ª≠ d·ª•ng MongoDB transaction ƒë·ªÉ tr√°nh race condition ho√†n to√†n
 */

export interface BalanceUpdate {
  available: number;
  frozen: number;
}

/**
 * ƒê·∫∑t l·ªánh giao d·ªãch - Tr·ª´ ti·ªÅn kh·∫£ d·ª•ng v√† c·ªông ti·ªÅn ƒë√≥ng bƒÉng
 * ‚úÖ S·ª¨A: S·ª≠ d·ª•ng MongoDB transaction ƒë·ªÉ tr√°nh race condition
 */
export async function placeTrade(db: any, userId: string, amount: number): Promise<boolean> {
  const client = (db as any).client || (db as any).db?.client;
  if (!client) {
    throw new Error('MongoDB client not available for transaction');
  }
  
  const session = client.startSession();
  
  try {
    await session.withTransaction(async () => {
      // ‚úÖ S·ª¨A: Ki·ªÉm tra balance trong transaction
      const user = await db.collection('users').findOne(
        { _id: new ObjectId(userId) },
        { session }
      );
      
      if (!user) {
        throw new Error('User kh√¥ng t·ªìn t·∫°i');
      }
      
      // ‚úÖ CHU·∫®N H√ìA: Lu√¥n s·ª≠ d·ª•ng balance d·∫°ng object
      let userBalance = user.balance || { available: 0, frozen: 0 };
      
      // N·∫øu balance l√† number (ki·ªÉu c≈©), chuy·ªÉn ƒë·ªïi th√†nh object
      if (typeof userBalance === 'number') {
        userBalance = {
          available: userBalance,
          frozen: 0
        };
      }
      
      const availableBalance = userBalance.available || 0;
      
      if (availableBalance < amount) {
        throw new Error('Balance kh√¥ng ƒë·ªß');
      }
      
      // ‚úÖ S·ª¨A: C·∫≠p nh·∫≠t balance trong transaction
      const updateResult = await db.collection('users').updateOne(
        { 
          _id: new ObjectId(userId),
          'balance.available': { $gte: amount }
        },
        {
          $inc: {
            'balance.available': -amount,
            'balance.frozen': amount
          },
          $set: { updatedAt: new Date() }
        },
        { session }
      );

      if (updateResult.modifiedCount === 0) {
        throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t balance - c√≥ th·ªÉ balance ƒë√£ thay ƒë·ªïi');
      }
    });

    console.log(`‚úÖ [BALANCE] User ${userId} ƒë·∫∑t l·ªánh ${amount} th√†nh c√¥ng`);
    return true;
  } catch (error) {
    console.error(`‚ùå [BALANCE] L·ªói ƒë·∫∑t l·ªánh user ${userId}:`, error);
    throw error;
  } finally {
    await session.endSession();
  }
}

/**
 * X·ª≠ l√Ω k·∫øt qu·∫£ th·∫Øng - Tr·∫£ l·∫°i ti·ªÅn g·ªëc + c·ªông profit
 * ‚úÖ S·ª¨A: S·ª≠ d·ª•ng MongoDB Aggregation Pipeline ƒë·ªÉ tr√°nh c·ªông d·ªìn
 */
export async function processWinTrade(db: any, userId: string, tradeAmount: number, profit: number): Promise<boolean> {
  try {
    // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng Aggregation Pipeline ƒë·ªÉ t√≠nh to√°n ch√≠nh x√°c
    const updateResult = await db.collection('users').updateOne(
      { _id: new ObjectId(userId) },
      [
        {
          $set: {
            balance: {
              available: {
                $add: [
                  { $ifNull: ['$balance.available', 0] },  // available hi·ªán t·∫°i
                  tradeAmount,  // ‚úÖ S·ª¨A: Ch·ªâ tr·∫£ l·∫°i amount g·ªëc, kh√¥ng c·ªông d·ªìn frozen
                  profit        // C·ªông th√™m ti·ªÅn th·∫Øng
                ]
              },
              frozen: {
                $subtract: [
                  { $ifNull: ['$balance.frozen', 0] },     // frozen hi·ªán t·∫°i
                  tradeAmount   // Ch·ªâ tr·ª´ amount g·ªëc c·ªßa l·ªánh n√†y
                ]
              }
            },
            updatedAt: new Date()
          }
        }
      ]
    );

    if (updateResult.modifiedCount === 0) {
      throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t balance cho user th·∫Øng');
    }

    console.log(`‚úÖ [BALANCE WIN] User ${userId}: +${tradeAmount} (g·ªëc) +${profit} (th·∫Øng), frozen -${tradeAmount}`);
    return true;
  } catch (error) {
    console.error(`‚ùå [BALANCE] L·ªói x·ª≠ l√Ω th·∫Øng user ${userId}:`, error);
    throw error;
  }
}

/**
 * X·ª≠ l√Ω k·∫øt qu·∫£ thua - Ch·ªâ tr·ª´ ti·ªÅn ƒë√≥ng bƒÉng
 * ‚úÖ S·ª¨A: S·ª≠ d·ª•ng MongoDB Aggregation Pipeline ƒë·ªÉ t√≠nh to√°n ch√≠nh x√°c
 */
export async function processLoseTrade(db: any, userId: string, tradeAmount: number): Promise<boolean> {
  try {
    // ‚úÖ S·ª¨A: S·ª≠ d·ª•ng Aggregation Pipeline ƒë·ªÉ t√≠nh to√°n ch√≠nh x√°c
    const updateResult = await db.collection('users').updateOne(
      { _id: new ObjectId(userId) },
      [
        {
          $set: {
            balance: {
              available: {
                $add: [
                  { $ifNull: ['$balance.available', 0] },  // available hi·ªán t·∫°i (kh√¥ng thay ƒë·ªïi)
                  0  // Kh√¥ng c·ªông g√¨ th√™m
                ]
              },
              frozen: {
                $subtract: [
                  { $ifNull: ['$balance.frozen', 0] },     // frozen hi·ªán t·∫°i
                  tradeAmount   // Ch·ªâ tr·ª´ amount g·ªëc c·ªßa l·ªánh n√†y
                ]
              }
            },
            updatedAt: new Date()
          }
        }
      ]
    );

    if (updateResult.modifiedCount === 0) {
      throw new Error('Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t balance cho user thua');
    }

    console.log(`‚ùå [BALANCE LOSE] User ${userId}: frozen -${tradeAmount} (m·∫•t ti·ªÅn g·ªëc)`);
    return true;
  } catch (error) {
    console.error(`‚ùå [BALANCE] L·ªói x·ª≠ l√Ω thua user ${userId}:`, error);
    throw error;
  }
}

/**
 * L·∫•y balance hi·ªán t·∫°i c·ªßa user
 */
export async function getUserBalance(db: any, userId: string): Promise<BalanceUpdate> {
  try {
    const user = await db.collection('users').findOne(
      { _id: new ObjectId(userId) },
      { projection: { balance: 1 } }
    );

    if (!user) {
      throw new Error('User kh√¥ng t·ªìn t·∫°i');
    }

    // Chu·∫©n h√≥a balance format
    let balance = user.balance || { available: 0, frozen: 0 };
    
    // N·∫øu balance l√† number (ki·ªÉu c≈©), chuy·ªÉn ƒë·ªïi th√†nh object
    if (typeof balance === 'number') {
      balance = {
        available: balance,
        frozen: 0
      };
    }

    return {
      available: balance.available || 0,
      frozen: balance.frozen || 0
    };
  } catch (error) {
    console.error(`‚ùå [BALANCE] L·ªói l·∫•y balance user ${userId}:`, error);
    throw error;
  }
}

/**
 * Ki·ªÉm tra balance c√≥ ƒë·ªß ƒë·ªÉ ƒë·∫∑t l·ªánh kh√¥ng
 */
export async function checkBalanceSufficient(db: any, userId: string, amount: number): Promise<boolean> {
  try {
    const balance = await getUserBalance(db, userId);
    return balance.available >= amount;
  } catch (error) {
    console.error(`‚ùå [BALANCE] L·ªói ki·ªÉm tra balance user ${userId}:`, error);
    return false;
  }
}

/**
 * T√≠nh to√°n profit d·ª±a tr√™n amount v√† t·ª∑ l·ªá th·∫Øng
 */
export function calculateProfit(amount: number, winRate: number = 0.9): number {
  return Math.floor(amount * winRate);
}

/**
 * Log balance change ƒë·ªÉ debug
 */
export async function logBalanceChange(db: any, userId: string, operation: string, details: any): Promise<void> {
  try {
    const balance = await getUserBalance(db, userId);
    console.log(`üìä [BALANCE LOG] User ${userId} - ${operation}:`, {
      currentBalance: balance,
      ...details,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error(`‚ùå [BALANCE LOG] L·ªói log balance user ${userId}:`, error);
  }
}

/**
 * ‚úÖ TH√äM: ƒê·ªìng b·ªô balance an to√†n - tr√°nh race condition
 * S·ª≠ d·ª•ng MongoDB transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n
 */
export async function syncBalanceSafely(db: any, userId: string): Promise<BalanceUpdate> {
  const client = (db as any).client || (db as any).db?.client;
  if (!client) {
    throw new Error('MongoDB client not available for transaction');
  }
  
  const session = client.startSession();
  
  try {
    let result: BalanceUpdate = { available: 0, frozen: 0 };
    
    await session.withTransaction(async () => {
      // L·∫•y balance hi·ªán t·∫°i trong transaction
      const user = await db.collection('users').findOne(
        { _id: new ObjectId(userId) },
        { session }
      );
      
      if (!user) {
        throw new Error('User kh√¥ng t·ªìn t·∫°i');
      }
      
      // Chu·∫©n h√≥a balance format
      let balance = user.balance || { available: 0, frozen: 0 };
      
      if (typeof balance === 'number') {
        balance = {
          available: balance,
          frozen: 0
        };
        
        // C·∫≠p nh·∫≠t database ƒë·ªÉ chuy·ªÉn ƒë·ªïi sang ki·ªÉu m·ªõi
        await db.collection('users').updateOne(
          { _id: new ObjectId(userId) },
          { 
            $set: { 
              balance: balance,
              updatedAt: new Date()
            } 
          },
          { session }
        );
      }
      
      result = {
        available: balance.available || 0,
        frozen: balance.frozen || 0
      };
    });
    
    return result;
  } catch (error) {
    console.error(`‚ùå [BALANCE SYNC] L·ªói ƒë·ªìng b·ªô balance user ${userId}:`, error);
    throw error;
  } finally {
    await session.endSession();
  }
}

/**
 * ‚úÖ TH√äM: Ki·ªÉm tra v√† s·ª≠a balance kh√¥ng nh·∫•t qu√°n
 * T·ª± ƒë·ªông s·ª≠a l·ªói balance khi ph√°t hi·ªán
 */
export async function validateAndFixBalance(db: any, userId: string): Promise<boolean> {
  try {
    const balance = await getUserBalance(db, userId);
    
    // Ki·ªÉm tra balance √¢m
    if (balance.available < 0 || balance.frozen < 0) {
      console.warn(`‚ö†Ô∏è [BALANCE FIX] User ${userId} c√≥ balance √¢m:`, balance);
      
      // S·ª≠a balance √¢m th√†nh 0
      await db.collection('users').updateOne(
        { _id: new ObjectId(userId) },
        {
          $set: {
            balance: {
              available: Math.max(0, balance.available),
              frozen: Math.max(0, balance.frozen)
            },
            updatedAt: new Date()
          }
        }
      );
      
      console.log(`‚úÖ [BALANCE FIX] ƒê√£ s·ª≠a balance √¢m cho user ${userId}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`‚ùå [BALANCE FIX] L·ªói ki·ªÉm tra balance user ${userId}:`, error);
    return false;
  }
}

/**
 * ‚úÖ TH√äM: Ki·ªÉm tra balance sau khi x·ª≠ l√Ω k·∫øt qu·∫£ giao d·ªãch
 * ƒê·∫£m b·∫£o t√≠nh nh·∫•t qu√°n c·ªßa d·ªØ li·ªáu
 */
export async function validateBalanceAfterTrade(db: any, userId: string, tradeAmount: number, isWin: boolean, profit: number = 0): Promise<boolean> {
  try {
    const balance = await getUserBalance(db, userId);
    
    // Log balance sau khi x·ª≠ l√Ω
    console.log(`üîç [BALANCE VALIDATION] User ${userId} sau ${isWin ? 'th·∫Øng' : 'thua'}:`, {
      available: balance.available,
      frozen: balance.frozen,
      total: balance.available + balance.frozen,
      tradeAmount,
      profit,
      isWin
    });
    
    // Ki·ªÉm tra logic c∆° b·∫£n
    if (balance.available < 0) {
      console.error(`‚ùå [BALANCE VALIDATION] User ${userId} c√≥ available √¢m: ${balance.available}`);
      return false;
    }
    
    if (balance.frozen < 0) {
      console.error(`‚ùå [BALANCE VALIDATION] User ${userId} c√≥ frozen √¢m: ${balance.frozen}`);
      return false;
    }
    
    // Ki·ªÉm tra logic nghi·ªáp v·ª•
    if (isWin) {
      // Khi th·∫Øng: frozen ph·∫£i gi·∫£m ƒë√∫ng tradeAmount
      const expectedFrozen = balance.frozen + tradeAmount; // V√¨ ƒë√£ tr·ª´ r·ªìi n√™n c·ªông l·∫°i ƒë·ªÉ ki·ªÉm tra
      if (Math.abs(expectedFrozen - balance.frozen) > 1) { // Cho ph√©p sai s·ªë 1 VND
        console.warn(`‚ö†Ô∏è [BALANCE VALIDATION] User ${userId} frozen kh√¥ng kh·ªõp sau khi th·∫Øng`);
        return false;
      }
    } else {
      // Khi thua: frozen ph·∫£i gi·∫£m ƒë√∫ng tradeAmount
      const expectedFrozen = balance.frozen + tradeAmount; // V√¨ ƒë√£ tr·ª´ r·ªìi n√™n c·ªông l·∫°i ƒë·ªÉ ki·ªÉm tra
      if (Math.abs(expectedFrozen - balance.frozen) > 1) { // Cho ph√©p sai s·ªë 1 VND
        console.warn(`‚ö†Ô∏è [BALANCE VALIDATION] User ${userId} frozen kh√¥ng kh·ªõp sau khi thua`);
        return false;
      }
    }
    
    console.log(`‚úÖ [BALANCE VALIDATION] User ${userId} balance h·ª£p l·ªá`);
    return true;
  } catch (error) {
    console.error(`‚ùå [BALANCE VALIDATION] L·ªói ki·ªÉm tra balance user ${userId}:`, error);
    return false;
  }
}

/**
 * ‚úÖ TH√äM: Log chi ti·∫øt balance change ƒë·ªÉ debug
 */
export async function logDetailedBalanceChange(db: any, userId: string, operation: string, details: any): Promise<void> {
  try {
    const balance = await getUserBalance(db, userId);
    const user = await db.collection('users').findOne(
      { _id: new ObjectId(userId) },
      { projection: { username: 1, email: 1 } }
    );
    
    console.log(`üìä [DETAILED BALANCE LOG] User ${user?.username || userId} (${user?.email || 'N/A'}) - ${operation}:`, {
      currentBalance: balance,
      totalBalance: balance.available + balance.frozen,
      ...details,
      timestamp: new Date().toISOString(),
      userId: userId
    });
  } catch (error) {
    console.error(`‚ùå [DETAILED BALANCE LOG] L·ªói log balance user ${userId}:`, error);
  }
}
