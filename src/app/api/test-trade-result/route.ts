import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { NextRequest } from 'next/server';

// API test Ä‘á»ƒ kiá»ƒm tra logic so sÃ¡nh káº¿t quáº£
export async function POST(request: NextRequest) {
  try {
    const { userDirection, sessionResult } = await request.json();
    
    if (!userDirection || !sessionResult) {
      return NextResponse.json({
        success: false,
        message: 'Thiáº¿u thÃ´ng tin userDirection hoáº·c sessionResult'
      });
    }

    console.log('ðŸ§ª Test logic so sÃ¡nh káº¿t quáº£:');
    console.log('User Direction:', userDirection);
    console.log('Session Result:', sessionResult);

    // Kiá»ƒm tra logic so sÃ¡nh
    const isWin = userDirection === sessionResult;
    const profit = isWin ? 900000 : -1000000; // Giáº£ sá»­ Ä‘áº·t 1,000,000 VND

    console.log('Káº¿t quáº£ so sÃ¡nh:', {
      userDirection,
      sessionResult,
      isWin,
      profit
    });

    return NextResponse.json({
      success: true,
      data: {
        userDirection,
        sessionResult,
        isWin,
        profit,
        result: isWin ? 'win' : 'lose',
        explanation: isWin 
          ? `User Ä‘áº·t ${userDirection}, káº¿t quáº£ phiÃªn ${sessionResult} â†’ THáº®NG`
          : `User Ä‘áº·t ${userDirection}, káº¿t quáº£ phiÃªn ${sessionResult} â†’ THUA`
      }
    });

  } catch (error) {
    console.error('Lá»—i khi test logic so sÃ¡nh:', error);
    return NextResponse.json(
      { success: false, message: 'Lá»—i mÃ¡y chá»§ ná»™i bá»™' },
      { status: 500 }
    );
  }
}

// API Ä‘á»ƒ test vá»›i dá»¯ liá»‡u thá»±c tá»« database
export async function GET(request: NextRequest) {
  try {
    const db = await getMongoDb();
    if (!db) {
      throw new Error('KhÃ´ng thá»ƒ káº¿t ná»‘i cÆ¡ sá»Ÿ dá»¯ liá»‡u');
    }

    // Láº¥y phiÃªn hiá»‡n táº¡i
    const currentSession = await db.collection('trading_sessions').findOne({
      status: { $in: ['ACTIVE', 'PREDICTED'] }
    });

    // Láº¥y lá»‡nh giao dá»‹ch gáº§n Ä‘Ã¢y
    const recentTrades = await db.collection('trades').find({}).sort({ createdAt: -1 }).limit(5).toArray();

    const testResults = [];

    // Test vá»›i tá»«ng lá»‡nh
    for (const trade of recentTrades) {
      if (currentSession && currentSession.result) {
        const isWin = trade.direction === currentSession.result;
        const profit = isWin ? Math.floor(trade.amount * 0.9) : -trade.amount;

        testResults.push({
          tradeId: trade._id,
          sessionId: trade.sessionId,
          userDirection: trade.direction,
          sessionResult: currentSession.result,
          isWin,
          profit,
          result: isWin ? 'win' : 'lose',
          amount: trade.amount
        });
      }
    }

    return NextResponse.json({
      success: true,
      data: {
        currentSession: currentSession ? {
          sessionId: currentSession.sessionId,
          result: currentSession.result,
          status: currentSession.status
        } : null,
        testResults,
        totalTrades: recentTrades.length
      }
    });

  } catch (error) {
    console.error('Lá»—i khi test vá»›i dá»¯ liá»‡u thá»±c:', error);
    return NextResponse.json(
      { success: false, message: 'Lá»—i mÃ¡y chá»§ ná»™i bá»™' },
      { status: 500 }
    );
  }
} 