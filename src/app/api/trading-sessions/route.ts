import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { NextRequest } from 'next/server';
import { processExpiredSessions } from '@/lib/sessionUtils';

export async function GET(request: NextRequest) {
  try {
    const db = await getMongoDb();
    if (!db) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    }

    // X·ª≠ l√Ω c√°c phi√™n h·∫øt h·∫°n tr∆∞·ªõc khi tr·∫£ v·ªÅ d·ªØ li·ªáu
    await processExpiredSessions(db, 'TradingSessions');

    const now = new Date();
    const currentMinute = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes()));
    const nextMinute = new Date(currentMinute.getTime() + 60000);

    // T·∫°o sessionId cho phi√™n hi·ªán t·∫°i
    const sessionId = `${currentMinute.getUTCFullYear()}${String(currentMinute.getUTCMonth() + 1).padStart(2, '0')}${String(currentMinute.getUTCDate()).padStart(2, '0')}${String(currentMinute.getUTCHours()).padStart(2, '0')}${String(currentMinute.getUTCMinutes()).padStart(2, '0')}`;

    // T√≠nh th·ªùi gian c√≤n l·∫°i
    const timeLeft = Math.max(0, Math.floor((nextMinute.getTime() - now.getTime()) / 1000));

    // Ki·ªÉm tra phi√™n hi·ªán t·∫°i - ch·ªâ l·∫•y phi√™n ACTIVE ho·∫∑c PREDICTED
    let currentSession = await db.collection('trading_sessions').findOne({ 
      sessionId: sessionId,
      status: { $in: ['ACTIVE', 'PREDICTED'] }
    });

    console.log('üîç Ki·ªÉm tra phi√™n hi·ªán t·∫°i:', {
      sessionId,
      currentSession: currentSession?.sessionId,
      currentStatus: currentSession?.status,
      now: now.toISOString(),
      currentMinute: currentMinute.toISOString()
    });

    // Ki·ªÉm tra xem phi√™n hi·ªán t·∫°i c√≥ k·∫øt th√∫c ch∆∞a
    if (currentSession && currentSession.endTime <= now) {
      console.log('‚è∞ Phi√™n hi·ªán t·∫°i ƒë√£ k·∫øt th√∫c, s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi processExpiredSessions');
      
      // C·∫≠p nh·∫≠t currentSession v·ªõi d·ªØ li·ªáu m·ªõi (n·∫øu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω)
      currentSession = await db.collection('trading_sessions').findOne({ 
        sessionId: currentSession.sessionId
      });
    }

    if (!currentSession) {
      // Ch·ª©c nƒÉng t·ª± ƒë·ªông t·∫°o phi√™n m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫Øt
      console.log('üö´ Ch·ª©c nƒÉng t·ª± ƒë·ªông t·∫°o phi√™n m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫Øt');
      currentSession = null;
    }

    // L·∫•y phi√™n ti·∫øp theo
    const nextSessionId = `${nextMinute.getUTCFullYear()}${String(nextMinute.getUTCMonth() + 1).padStart(2, '0')}${String(nextMinute.getUTCDate()).padStart(2, '0')}${String(nextMinute.getUTCHours()).padStart(2, '0')}${String(nextMinute.getUTCMinutes()).padStart(2, '0')}`;

    return NextResponse.json({
      success: true,
      currentSession: {
        sessionId: currentSession?.sessionId || sessionId,
        startTime: currentSession?.startTime || currentMinute,
        endTime: currentSession?.endTime || nextMinute,
        timeLeft,
        status: currentSession?.status || 'ACTIVE',
        result: currentSession?.result || null
      },
      nextSession: {
        sessionId: nextSessionId,
        startTime: nextMinute,
        endTime: new Date(nextMinute.getTime() + 60000)
      },
      serverTime: now.toISOString()
    });

  } catch (error) {
    console.error('L·ªói khi l·∫•y phi√™n hi·ªán t·∫°i:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' },
      { status: 500 }
    );
  }
}

// API ƒë·ªÉ admin t·∫°o d·ª± ƒëo√°n cho nhi·ªÅu phi√™n
export async function POST(request: NextRequest) {
  try {
    const { action, sessions } = await request.json();
    const db = await getMongoDb();
    
    if (!db) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    }

    if (action === 'create_predictions') {
      // Ch·ª©c nƒÉng t·∫°o d·ª± ƒëo√°n cho 30 phi√™n ti·∫øp theo ƒë√£ ƒë∆∞·ª£c t·∫Øt
      return NextResponse.json({
        success: false,
        message: 'Ch·ª©c nƒÉng t·∫°o d·ª± ƒëo√°n cho 30 phi√™n ti·∫øp theo ƒë√£ ƒë∆∞·ª£c t·∫Øt',
        data: []
      });
    }

    return NextResponse.json(
      { success: false, message: 'H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá' },
      { status: 400 }
    );

  } catch (error) {
    console.error('L·ªói khi t·∫°o d·ª± ƒëo√°n:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' },
      { status: 500 }
    );
  }
} 