import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { NextRequest } from 'next/server';

// API ƒë·ªÉ s·ª≠a t·∫•t c·∫£ c√°c phi√™n ƒë√£ k·∫øt th√∫c nh∆∞ng ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t
export async function GET(request: NextRequest) {
  try {
    const db = await getMongoDb();
    if (!db) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    }

    const now = new Date();
    const results = {
      fixedSessions: [] as any[],
      totalFixed: 0,
      errors: [] as string[]
    };

    // T√¨m t·∫•t c·∫£ phi√™n ACTIVE ƒë√£ k·∫øt th√∫c
    const expiredActiveSessions = await db.collection('trading_sessions').find({
      status: 'ACTIVE',
      endTime: { $lte: now }
    }).toArray();

    console.log(`üîç T√¨m th·∫•y ${expiredActiveSessions.length} phi√™n ACTIVE ƒë√£ k·∫øt th√∫c`);

    // X·ª≠ l√Ω t·ª´ng phi√™n ƒë√£ k·∫øt th√∫c
    for (const session of expiredActiveSessions) {
      try {
        // T·∫°o k·∫øt qu·∫£ random cho phi√™n ƒë√£ k·∫øt th√∫c (60% UP, 40% DOWN)
        const random = Math.random();
        const predictedResult = random < 0.6 ? 'UP' : 'DOWN';
        
        // Chuy·ªÉn phi√™n t·ª´ ACTIVE sang PREDICTED v·ªõi k·∫øt qu·∫£
        await db.collection('trading_sessions').updateOne(
          { _id: session._id },
          { 
            $set: { 
              status: 'PREDICTED',
              result: predictedResult,
              updatedAt: now
            }
          }
        );
        
        results.fixedSessions.push({
          sessionId: session.sessionId,
          oldStatus: 'ACTIVE',
          newStatus: 'PREDICTED',
          result: predictedResult,
          endTime: session.endTime,
          timeExpired: Math.floor((now.getTime() - session.endTime.getTime()) / 1000)
        });
        
        results.totalFixed++;
        
        console.log(`‚úÖ ƒê√£ s·ª≠a phi√™n ${session.sessionId}: ACTIVE -> PREDICTED, K·∫øt qu·∫£: ${predictedResult}`);
        
      } catch (error) {
        const errorMsg = `L·ªói khi s·ª≠a phi√™n ${session.sessionId}: ${error instanceof Error ? error.message : 'Unknown error'}`;
        results.errors.push(errorMsg);
        console.error(errorMsg);
      }
    }

    // T√¨m t·∫•t c·∫£ phi√™n PREDICTED ƒë√£ k·∫øt th√∫c v√† ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω (ch·ªâ x·ª≠ l√Ω phi√™n kh√¥ng c√≥ k·∫øt qu·∫£ admin)
    const expiredPredictedSessions = await db.collection('trading_sessions').find({
      status: 'PREDICTED',
      endTime: { $lte: now },
      createdBy: { $ne: 'admin' } // Ch·ªâ x·ª≠ l√Ω phi√™n kh√¥ng c√≥ k·∫øt qu·∫£ admin
    }).toArray();

    console.log(`üîç T√¨m th·∫•y ${expiredPredictedSessions.length} phi√™n PREDICTED ƒë√£ k·∫øt th√∫c (kh√¥ng c√≥ k·∫øt qu·∫£ admin)`);

    // X·ª≠ l√Ω c√°c phi√™n PREDICTED ƒë√£ k·∫øt th√∫c (ch·ªâ phi√™n kh√¥ng c√≥ k·∫øt qu·∫£ admin)
    for (const session of expiredPredictedSessions) {
      try {
        const sessionResult = session.result;
        
        if (!sessionResult) {
          // N·∫øu phi√™n PREDICTED kh√¥ng c√≥ k·∫øt qu·∫£, t·∫°o k·∫øt qu·∫£ random
          const random = Math.random();
          const predictedResult = random < 0.6 ? 'UP' : 'DOWN';
          
          await db.collection('trading_sessions').updateOne(
            { _id: session._id },
            { 
              $set: { 
                result: predictedResult,
                updatedAt: now
              }
            }
          );
          
          console.log(`‚úÖ ƒê√£ th√™m k·∫øt qu·∫£ cho phi√™n ${session.sessionId}: ${predictedResult}`);
        }

        // T√¨m t·∫•t c·∫£ l·ªánh pending c·ªßa phi√™n n√†y
        const pendingTrades = await db.collection('trades').find({
          sessionId: session.sessionId,
          status: 'pending'
        }).toArray();

        console.log(`üîç T√¨m th·∫•y ${pendingTrades.length} l·ªánh pending cho phi√™n ${session.sessionId}`);

        // Th·ªëng k√™ k·∫øt qu·∫£
        let totalWins = 0;
        let totalLosses = 0;
        let totalWinAmount = 0;
        let totalLossAmount = 0;

        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ cho t·ª´ng l·ªánh
        for (const trade of pendingTrades) {
          const isWin = trade.direction === sessionResult;
          const profit = isWin ? Math.floor(trade.amount * 0.9) : 0; // 10 ƒÉn 9

          const updateData = {
            status: 'completed',
            result: isWin ? 'win' : 'lose',
            profit: profit,
            completedAt: now,
            updatedAt: now
          };

          await db.collection('trades').updateOne(
            { _id: trade._id },
            { $set: updateData }
          );

          console.log(`‚úÖ C·∫≠p nh·∫≠t l·ªánh ${trade._id}: ${isWin ? 'TH·∫ÆNG' : 'THUA'} - L·ª£i nhu·∫≠n: ${profit}`);

          // C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi d√πng
          const user = await db.collection('users').findOne({ _id: trade.userId });
          if (user) {
            let currentBalance = user.balance || 0;
            let newBalance = currentBalance;
            
            if (isWin) {
              // Th·∫Øng: c·ªông ti·ªÅn th·∫Øng (ti·ªÅn c∆∞·ª£c + l·ª£i nhu·∫≠n)
              newBalance += trade.amount + profit;
              totalWins++;
              totalWinAmount += trade.amount + profit;
            } else {
              // Thua: tr·ª´ ti·ªÅn c∆∞·ª£c (v√¨ kh√¥ng tr·ª´ khi ƒë·∫∑t l·ªánh)
              newBalance -= trade.amount;
              totalLosses++;
              totalLossAmount += trade.amount;
            }

            await db.collection('users').updateOne(
              { _id: trade.userId },
              { 
                $set: { 
                  balance: newBalance,
                  updatedAt: now
                }
              }
            );

            console.log(`üí∞ C·∫≠p nh·∫≠t s·ªë d∆∞ user ${trade.userId}: ${currentBalance} -> ${newBalance} (${isWin ? 'TH·∫ÆNG' : 'THUA'})`);
          }
        }

        // Chuy·ªÉn phi√™n t·ª´ PREDICTED sang COMPLETED sau khi x·ª≠ l√Ω xong
        await db.collection('trading_sessions').updateOne(
          { _id: session._id },
          { 
            $set: { 
              status: 'COMPLETED',
              totalTrades: pendingTrades.length,
              totalWins: totalWins,
              totalLosses: totalLosses,
              totalWinAmount: totalWinAmount,
              totalLossAmount: totalLossAmount,
              completedAt: now,
              updatedAt: now
            }
          }
        );

        results.fixedSessions.push({
          sessionId: session.sessionId,
          oldStatus: 'PREDICTED',
          newStatus: 'COMPLETED',
          result: sessionResult,
          totalTrades: pendingTrades.length,
          totalWins: totalWins,
          totalLosses: totalLosses,
          totalWinAmount: totalWinAmount,
          totalLossAmount: totalLossAmount,
          endTime: session.endTime,
          timeExpired: Math.floor((now.getTime() - session.endTime.getTime()) / 1000)
        });
        
        results.totalFixed++;
        
        console.log(`üìà Ho√†n th√†nh phi√™n ${session.sessionId}: ${totalWins} th·∫Øng, ${totalLosses} thua, T·ªïng th·∫Øng: ${totalWinAmount}, T·ªïng thua: ${totalLossAmount}`);
        
      } catch (error) {
        const errorMsg = `L·ªói khi x·ª≠ l√Ω phi√™n PREDICTED ${session.sessionId}: ${error instanceof Error ? error.message : 'Unknown error'}`;
        results.errors.push(errorMsg);
        console.error(errorMsg);
      }
    }

    return NextResponse.json({
      success: true,
      message: `ƒê√£ s·ª≠a ${results.totalFixed} phi√™n ƒë√£ k·∫øt th√∫c`,
      timestamp: now.toISOString(),
      results
    });

  } catch (error) {
    console.error('L·ªói khi s·ª≠a phi√™n ƒë√£ k·∫øt th√∫c:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô', error: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    );
  }
} 