import { NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { NextRequest } from 'next/server';

// API ƒë·ªÉ d·ªçn d·∫πp phi√™n c≈© v√† t·ªëi ∆∞u h√≥a database
export async function POST(request: NextRequest) {
  try {
    const db = await getMongoDb();
    if (!db) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    }

    const body = await request.json();
    const { daysToKeep = 30, dryRun = false } = body;

    const now = new Date();
    const cutoffDate = new Date(now.getTime() - (daysToKeep * 24 * 60 * 60 * 1000));

    console.log(`üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp phi√™n c≈© h∆°n ${daysToKeep} ng√†y (tr∆∞·ªõc ${cutoffDate.toISOString()})`);

    // T√¨m c√°c phi√™n c≈© ƒë·ªÉ x√≥a
    const oldSessions = await db.collection('trading_sessions').find({
      createdAt: { $lt: cutoffDate },
      status: { $in: ['COMPLETED', 'CANCELLED'] }
    }).toArray();

    console.log(`üìä T√¨m th·∫•y ${oldSessions.length} phi√™n c≈© ƒë·ªÉ x√≥a`);

    if (dryRun) {
      return NextResponse.json({
        success: true,
        message: `Dry run: S·∫Ω x√≥a ${oldSessions.length} phi√™n c≈©`,
        sessionsToDelete: oldSessions.length,
        cutoffDate: cutoffDate.toISOString()
      });
    }

    // X√≥a c√°c phi√™n c≈©
    const deleteResult = await db.collection('trading_sessions').deleteMany({
      createdAt: { $lt: cutoffDate },
      status: { $in: ['COMPLETED', 'CANCELLED'] }
    });

    console.log(`‚úÖ ƒê√£ x√≥a ${deleteResult.deletedCount} phi√™n c≈©`);

    // T·ªëi ∆∞u h√≥a collection
    await db.collection('trading_sessions').createIndex({ createdAt: -1 });
    await db.collection('trading_sessions').createIndex({ status: 1, createdAt: -1 });

    // Th·ªëng k√™ sau khi d·ªçn d·∫πp
    const totalSessions = await db.collection('trading_sessions').countDocuments();
    const activeSessions = await db.collection('trading_sessions').countDocuments({ status: 'ACTIVE' });
    const completedSessions = await db.collection('trading_sessions').countDocuments({ status: 'COMPLETED' });

    return NextResponse.json({
      success: true,
      message: `D·ªçn d·∫πp ho√†n th√†nh: ƒê√£ x√≥a ${deleteResult.deletedCount} phi√™n c≈©`,
      stats: {
        deletedCount: deleteResult.deletedCount,
        totalSessions,
        activeSessions,
        completedSessions,
        cutoffDate: cutoffDate.toISOString()
      }
    });

  } catch (error) {
    console.error('L·ªói khi d·ªçn d·∫πp phi√™n:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' },
      { status: 500 }
    );
  }
}

// API ƒë·ªÉ xem th·ªëng k√™ phi√™n
export async function GET(request: NextRequest) {
  try {
    const db = await getMongoDb();
    if (!db) {
      throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu');
    }

    const { searchParams } = new URL(request.url);
    const days = parseInt(searchParams.get('days') || '7');

    const now = new Date();
    const startDate = new Date(now.getTime() - (days * 24 * 60 * 60 * 1000));

    // Th·ªëng k√™ t·ªïng quan
    const totalSessions = await db.collection('trading_sessions').countDocuments();
    const activeSessions = await db.collection('trading_sessions').countDocuments({ status: 'ACTIVE' });
    const completedSessions = await db.collection('trading_sessions').countDocuments({ status: 'COMPLETED' });

    // Th·ªëng k√™ theo ng√†y
    const sessionsByDay = await db.collection('trading_sessions').aggregate([
      {
        $match: {
          createdAt: { $gte: startDate }
        }
      },
      {
        $group: {
          _id: {
            $dateToString: {
              format: "%Y-%m-%d",
              date: "$createdAt"
            }
          },
          count: { $sum: 1 },
          activeCount: {
            $sum: { $cond: [{ $eq: ["$status", "ACTIVE"] }, 1, 0] }
          },
          completedCount: {
            $sum: { $cond: [{ $eq: ["$status", "COMPLETED"] }, 1, 0] }
          }
        }
      },
      {
        $sort: { _id: -1 }
      }
    ]).toArray();

    // Phi√™n c≈© nh·∫•t v√† m·ªõi nh·∫•t
    const oldestSession = await db.collection('trading_sessions')
      .find({})
      .sort({ createdAt: 1 })
      .limit(1)
      .toArray();

    const newestSession = await db.collection('trading_sessions')
      .find({})
      .sort({ createdAt: -1 })
      .limit(1)
      .toArray();

    return NextResponse.json({
      success: true,
      stats: {
        totalSessions,
        activeSessions,
        completedSessions,
        sessionsByDay,
        oldestSession: oldestSession[0] || null,
        newestSession: newestSession[0] || null,
        period: `${days} ng√†y g·∫ßn ƒë√¢y`
      }
    });

  } catch (error) {
    console.error('L·ªói khi l·∫•y th·ªëng k√™ phi√™n:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói m√°y ch·ªß n·ªôi b·ªô' },
      { status: 500 }
    );
  }
}

