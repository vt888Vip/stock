import { NextRequest, NextResponse } from 'next/server';
import { getMongoDb } from '@/lib/db';
import { ObjectId } from 'mongodb';
import { verifyToken } from '@/lib/auth';

// API ƒë·ªÉ t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn m·ªõi
export async function POST(req: NextRequest) {
  try {
    console.log('Withdrawal request received');
    
    // X√°c th·ª±c ng∆∞·ªùi d√πng
    const token = req.headers.get('authorization')?.split(' ')[1];
    if (!token) {
      console.log('No authorization token found');
      return NextResponse.json({ message: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p' }, { status: 401 });
    }

    console.log('Verifying token...');
    const { userId, isValid } = await verifyToken(token);
    if (!isValid || !userId) {
      console.log('Invalid token:', { userId, isValid });
      return NextResponse.json({ message: 'Token kh√¥ng h·ª£p l·ªá' }, { status: 401 });
    }
    
    console.log('Token verified for user:', userId);

    // Parse request body
    const body = await req.json();
    console.log('Withdrawal request body:', body);
    
    const { amount, bankName, accountNumber, accountHolder } = body;

    if (!amount || !bankName || !accountNumber || !accountHolder) {
      console.log('Missing required fields:', { amount: !!amount, bankName: !!bankName, accountNumber: !!accountNumber, accountHolder: !!accountHolder });
      return NextResponse.json({ message: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt' }, { status: 400 });
    }

    // K·∫øt n·ªëi DB
    console.log('Connecting to database...');
    const db = await getMongoDb();
    console.log('Database connected');

    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    console.log('Finding user with ID:', userId);
    const user = await db.collection('users').findOne({ _id: new ObjectId(userId) });
    if (!user) {
      console.log('User not found');
      return NextResponse.json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' }, { status: 404 });
    }
    console.log('User found:', { username: user.username, balance: user.balance });

    // ‚úÖ ƒê√£ lo·∫°i b·ªè gi·ªõi h·∫°n r√∫t ti·ªÅn - User c√≥ th·ªÉ r√∫t b·∫•t k·ª≥ s·ªë ti·ªÅn n√†o (ch·ªâ c·∫ßn ƒë·ªß s·ªë d∆∞)
    console.log('‚úÖ Kh√¥ng c√≥ gi·ªõi h·∫°n r√∫t ti·ªÅn - User c√≥ th·ªÉ r√∫t b·∫•t k·ª≥ s·ªë ti·ªÅn n√†o');

    // ‚úÖ CHU·∫®N H√ìA: Lu√¥n s·ª≠ d·ª•ng balance d·∫°ng object
    let userBalance = user.balance || { available: 0, frozen: 0 };
    
    // N·∫øu balance l√† number (ki·ªÉu c≈©), chuy·ªÉn ƒë·ªïi th√†nh object
    if (typeof userBalance === 'number') {
      userBalance = {
        available: userBalance,
        frozen: 0
      };
      
      console.log(`üîÑ [WITHDRAWAL MIGRATION] User ${user.username}: Chuy·ªÉn ƒë·ªïi balance t·ª´ number sang object`);
    }
    
    const currentAvailable = userBalance.available || 0;
    
    // Ki·ªÉm tra s·ªë d∆∞
    if (currentAvailable < amount) {
      return NextResponse.json({ message: 'S·ªë d∆∞ kh√¥ng ƒë·ªß' }, { status: 400 });
    }

    // ‚úÖ TR·ª™ TI·ªÄN NGAY L·∫¨P T·ª®C khi user r√∫t ti·ªÅn
    const newAvailableBalance = currentAvailable - amount;
    const newBalance = {
      ...userBalance,
      available: newAvailableBalance
    };
    
    await db.collection('users').updateOne(
      { _id: new ObjectId(userId) },
      { 
        $set: { 
          balance: newBalance,
          updatedAt: new Date()
        } 
      }
    );
    
    console.log(`üí∞ [WITHDRAWAL] ƒê√£ tr·ª´ ${amount} VND t·ª´ user ${user.username}. S·ªë d∆∞ c≈©: ${currentAvailable} VND, S·ªë d∆∞ m·ªõi: ${newAvailableBalance} VND`);

    // T·∫°o y√™u c·∫ßu r√∫t ti·ªÅn m·ªõi v·ªõi ID theo ƒë·ªãnh d·∫°ng RUT-username-timestamp
    const timestamp = new Date().getTime();
    const username = user.username || 'user';
    const withdrawalId = `RUT-${username}-${timestamp}`;

    const withdrawal = {
      withdrawalId,
      user: new ObjectId(userId),
      username: user.username,
      amount,
      bankName,
      bankAccountNumber: accountNumber,
      accountHolder: accountHolder,
      status: 'Ch·ªù duy·ªát',
      notes: '',
      createdAt: new Date(),
      updatedAt: new Date()
    };

    const result = await db.collection('withdrawals').insertOne(withdrawal);

    // G·ª≠i th√¥ng b√°o cho admin (c√≥ th·ªÉ tri·ªÉn khai sau)
    // TODO: G·ª≠i th√¥ng b√°o cho admin qua socket ho·∫∑c email

    return NextResponse.json({
      message: 'Y√™u c·∫ßu r√∫t ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i v√† ti·ªÅn ƒë√£ b·ªã tr·ª´ kh·ªèi t√†i kho·∫£n. Vui l√≤ng ch·ªù admin x√©t duy·ªát.',
      withdrawalId: result.insertedId
    }, { status: 201 });

  } catch (error) {
    console.error('Error creating withdrawal request:', error);
    return NextResponse.json({ message: 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o y√™u c·∫ßu r√∫t ti·ªÅn' }, { status: 500 });
  }
}
