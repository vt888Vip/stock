const https = require('https');
const http = require('http');

const BASE_URL = 'http://localhost:3000';

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port,
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: options.headers || {}
    };

    const req = client.request(requestOptions, (res) => {
      let data = '';
      res.on('data', (chunk) => {
        data += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (error) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

async function testBalanceSimple() {
  console.log('üí∞ Test c·∫≠p nh·∫≠t s·ªë d∆∞ ƒë∆°n gi·∫£n...\n');

  try {
    // 1. Test ƒëƒÉng nh·∫≠p
    console.log('1Ô∏è‚É£ Test ƒëƒÉng nh·∫≠p...');
    const loginResponse = await makeRequest(`${BASE_URL}/api/auth/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: {
        email: 'test@example.com',
        password: 'password123'
      }
    });

    if (loginResponse.status !== 200) {
      throw new Error('ƒêƒÉng nh·∫≠p th·∫•t b·∫°i');
    }

    const loginData = loginResponse.data;
    const token = loginData.token;
    console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng\n');

    // 2. L·∫•y s·ªë d∆∞ ban ƒë·∫ßu
    console.log('2Ô∏è‚É£ L·∫•y s·ªë d∆∞ ban ƒë·∫ßu...');
    const initialBalanceResponse = await makeRequest(`${BASE_URL}/api/user/balance`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    if (initialBalanceResponse.status === 200) {
      const initialBalanceData = initialBalanceResponse.data;
      console.log('üí∞ S·ªë d∆∞ ban ƒë·∫ßu:', initialBalanceData.balance.available);
    }

    // 3. Test c·∫≠p nh·∫≠t s·ªë d∆∞ cho phi√™n c·ª• th·ªÉ
    console.log('3Ô∏è‚É£ Test c·∫≠p nh·∫≠t s·ªë d∆∞...');
    const sessionId = '202507130102'; // Thay b·∫±ng sessionId th·ª±c t·∫ø
    
    const updateBalanceResponse = await makeRequest(`${BASE_URL}/api/test-balance`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: {
        action: 'update_balance',
        sessionId: sessionId
      }
    });

    if (updateBalanceResponse.status === 200) {
      const updateData = updateBalanceResponse.data;
      console.log('üìä K·∫øt qu·∫£ c·∫≠p nh·∫≠t s·ªë d∆∞:', updateData);
      
      if (updateData.success) {
        console.log('‚úÖ C·∫≠p nh·∫≠t s·ªë d∆∞ th√†nh c√¥ng!');
        console.log(`üí∞ S·ªë d∆∞ c≈©: ${updateData.data.oldBalance.toLocaleString()}`);
        console.log(`üí∞ S·ªë d∆∞ m·ªõi: ${updateData.data.newBalance.toLocaleString()}`);
        console.log(`üí∞ Ti·ªÅn ƒë·∫∑t c∆∞·ª£c: ${updateData.data.tradeAmount.toLocaleString()}`);
        console.log(`üí∞ Ti·ªÅn th·∫Øng: ${updateData.data.profit.toLocaleString()}`);
        console.log(`üí∞ T·ªïng c·ªông: ${updateData.data.totalAdded.toLocaleString()}`);
      } else {
        console.log('‚ùå C·∫≠p nh·∫≠t s·ªë d∆∞ th·∫•t b·∫°i:', updateData.message);
      }
    } else {
      console.log('‚ùå L·ªói khi g·ªçi API c·∫≠p nh·∫≠t s·ªë d∆∞');
    }

    // 4. Ki·ªÉm tra s·ªë d∆∞ sau khi c·∫≠p nh·∫≠t
    console.log('4Ô∏è‚É£ Ki·ªÉm tra s·ªë d∆∞ sau khi c·∫≠p nh·∫≠t...');
    const finalBalanceResponse = await makeRequest(`${BASE_URL}/api/user/balance`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    if (finalBalanceResponse.status === 200) {
      const finalBalanceData = finalBalanceResponse.data;
      console.log('üí∞ S·ªë d∆∞ cu·ªëi c√πng:', finalBalanceData.balance.available);
    }

    console.log('\nüéâ Test c·∫≠p nh·∫≠t s·ªë d∆∞ ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
    process.exit(1);
  }
}

// Ch·∫°y test
testBalanceSimple(); 