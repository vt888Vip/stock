const { MongoClient } = require('mongodb');

// MongoDB connection string
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/financial_platform';

async function testAndFixBalance() {
  const client = new MongoClient(MONGODB_URI);
  
  try {
    await client.connect();
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
    
    const db = client.db();
    
    // 1. T√¨m t·∫•t c·∫£ users c√≥ balance kh√¥ng h·ª£p l·ªá
    console.log('\nüîç ƒêang t√¨m users c√≥ balance kh√¥ng h·ª£p l·ªá...');
    
    const invalidUsers = await db.collection('users').find({
      $or: [
        { 'balance.available': { $lt: 0 } },
        { 'balance.frozen': { $lt: 0 } },
        { balance: { $type: 'number' } } // Balance ki·ªÉu c≈©
      ]
    }).toArray();
    
    console.log(`üìä T√¨m th·∫•y ${invalidUsers.length} users c√≥ balance kh√¥ng h·ª£p l·ªá`);
    
    if (invalidUsers.length === 0) {
      console.log('‚úÖ T·∫•t c·∫£ balance ƒë·ªÅu h·ª£p l·ªá!');
      return;
    }
    
    // 2. Hi·ªÉn th·ªã danh s√°ch users c√≥ v·∫•n ƒë·ªÅ
    console.log('\nüìã Danh s√°ch users c√≥ v·∫•n ƒë·ªÅ:');
    invalidUsers.forEach((user, index) => {
      console.log(`${index + 1}. ${user.username} (${user.email})`);
      console.log(`   Balance hi·ªán t·∫°i:`, user.balance);
      
      if (typeof user.balance === 'number') {
        console.log(`   ‚ö†Ô∏è  ƒê·ªãnh d·∫°ng c≈© (number)`);
      }
      if (user.balance?.available < 0) {
        console.log(`   ‚ùå Available √¢m: ${user.balance.available}`);
      }
      if (user.balance?.frozen < 0) {
        console.log(`   ‚ùå Frozen √¢m: ${user.balance.frozen}`);
      }
      console.log('');
    });
    
    // 3. H·ªèi ng∆∞·ªùi d√πng c√≥ mu·ªën s·ª≠a kh√¥ng
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    const answer = await new Promise((resolve) => {
      rl.question('B·∫°n c√≥ mu·ªën s·ª≠a balance cho t·∫•t c·∫£ users n√†y kh√¥ng? (y/N): ', resolve);
    });
    
    rl.close();
    
    if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
      console.log('‚ùå H·ªßy b·ªè vi·ªác s·ª≠a balance');
      return;
    }
    
    // 4. S·ª≠a balance cho t·ª´ng user
    console.log('\nüîß ƒêang s·ª≠a balance...');
    
    let fixedCount = 0;
    let errorCount = 0;
    
    for (const user of invalidUsers) {
      try {
        let newBalance = { available: 0, frozen: 0 };
        
        // N·∫øu balance l√† number (ki·ªÉu c≈©), chuy·ªÉn ƒë·ªïi th√†nh object
        if (typeof user.balance === 'number') {
          newBalance = {
            available: Math.max(0, user.balance),
            frozen: 0
          };
          console.log(`   üîÑ ${user.username}: Chuy·ªÉn ƒë·ªïi t·ª´ number (${user.balance}) sang object`);
        } else {
          // S·ª≠a balance √¢m
          newBalance = {
            available: Math.max(0, user.balance?.available || 0),
            frozen: Math.max(0, user.balance?.frozen || 0)
          };
          
          if (user.balance?.available < 0) {
            console.log(`   üîß ${user.username}: S·ª≠a available t·ª´ ${user.balance.available} th√†nh ${newBalance.available}`);
          }
          if (user.balance?.frozen < 0) {
            console.log(`   üîß ${user.username}: S·ª≠a frozen t·ª´ ${user.balance.frozen} th√†nh ${newBalance.frozen}`);
          }
        }
        
        // C·∫≠p nh·∫≠t database
        await db.collection('users').updateOne(
          { _id: user._id },
          { 
            $set: { 
              balance: newBalance,
              updatedAt: new Date()
            } 
          }
        );
        
        fixedCount++;
        console.log(`   ‚úÖ ${user.username}: ƒê√£ s·ª≠a th√†nh c√¥ng`);
        
      } catch (error) {
        errorCount++;
        console.error(`   ‚ùå ${user.username}: L·ªói - ${error.message}`);
      }
    }
    
    console.log(`\nüéâ Ho√†n th√†nh! ƒê√£ s·ª≠a ${fixedCount} users, ${errorCount} l·ªói`);
    
    // 5. Ki·ªÉm tra l·∫°i
    console.log('\nüîç Ki·ªÉm tra l·∫°i sau khi s·ª≠a...');
    const remainingInvalidUsers = await db.collection('users').find({
      $or: [
        { 'balance.available': { $lt: 0 } },
        { 'balance.frozen': { $lt: 0 } },
        { balance: { $type: 'number' } }
      ]
    }).toArray();
    
    if (remainingInvalidUsers.length === 0) {
      console.log('‚úÖ T·∫•t c·∫£ balance ƒë√£ ƒë∆∞·ª£c s·ª≠a th√†nh c√¥ng!');
    } else {
      console.log(`‚ö†Ô∏è  V·∫´n c√≤n ${remainingInvalidUsers.length} users c√≥ v·∫•n ƒë·ªÅ`);
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await client.close();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script
testAndFixBalance().catch(console.error);
